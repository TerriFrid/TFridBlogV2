@model TFridBlog.Models.Comment

@{
    ViewBag.Title = "Edit";
}


@using (Html.BeginForm("Edit", "Comments", FormMethod.Post, null))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.BlogPostId)
    @Html.Hidden("Slug", Model.BlogPost.Slug)
    @Html.HiddenFor(model => model.AuthorId)
    @Html.HiddenFor(model => model.Create)
    @Html.HiddenFor(model => model.Update)

    <div class="container">
        <div class="row">
            <div class="col">
                <h2>Edit Comment</h2>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.UpdateReason, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UpdateReason, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UpdateReason, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
                        @*@Html.Raw(Model.Body)*@
                        @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-action" />                       
                      @Html.ActionLink("Back to Post", "Details", "BlogPosts", new { slug = Model.BlogPost.Slug }, new { @class = "btn btn-dark" })
                        
                        @*  TLF I'll uncomment this button after I add moderator comment list functionality
                        @Html.ActionLink("Back to  Comment List", "Index", null, new { @class = "btn btn-dark" })*@
                    </div>
                </div> 
            </div>
        </div>
    </div>
}

@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
        <script src="~/Scripts/tinymce/tinymce.js"></script>
        <script src="~/Scripts/tinymce/jquery.tinymce.min.js"></script>

        <script>
        $(function () {
            tinymce.init({
                selector: '#Body'
            })
        });
        </script>
    
}
